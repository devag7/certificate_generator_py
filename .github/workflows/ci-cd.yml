name: Certificate Generation System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg imagemagick

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Create required directories
      run: |
        mkdir -p certificates temp templates fonts logs pids

    - name: Create dummy template and font files
      run: |
        # Create a dummy template image for testing
        convert -size 1920x1080 xc:white templates/certificate_template.jpg
        # Create a dummy font (or use system font)
        cp /usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf fonts/Open\ Sans\ Bold.ttf 2>/dev/null || echo "Font file created"

    - name: Run unit tests
      env:
        CELERY_ALWAYS_EAGER: true
        CELERY_EAGER_PROPAGATES_EXCEPTIONS: true
      run: |
        python -m pytest test_suite.py -v --cov=. --cov-report=xml

    - name: Test basic functionality
      env:
        ASYNC_MODE: false
      run: |
        python -c "
        from tasks import validate_data
        from utils import generate_qr_code, format_datetime
        from datetime import datetime
        
        # Test utilities
        print('Testing QR code generation...')
        qr_path = generate_qr_code('TEST-123', 'temp')
        assert qr_path.exists(), 'QR code not generated'
        print('✅ QR code generation working')
        
        # Test data validation
        print('Testing data validation...')
        test_data = {
            'user_name': 'Test User',
            'college': 'Test College',
            'certificate_id': 'TEST-001',
            'issued_at': datetime.now().isoformat(),
            'topic': 'Test Topic'
        }
        validated = validate_data(test_data)
        assert validated == test_data, 'Data validation failed'
        print('✅ Data validation working')
        
        # Test datetime formatting
        print('Testing datetime formatting...')
        formatted = format_datetime(datetime.now().isoformat())
        assert isinstance(formatted, str), 'Datetime formatting failed'
        print('✅ Datetime formatting working')
        
        print('All basic functionality tests passed!')
        "

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        mkdir -p dist
        tar -czf dist/certificate-gen-system.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='dist' \
          --exclude='my_project_env' \
          --exclude='certificates' \
          --exclude='temp' \
          --exclude='logs' \
          --exclude='pids' \
          .

    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: certificate-gen-system
        path: dist/certificate-gen-system.tar.gz

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      uses: tj-actions/bandit@v5.5
      with:
        options: "-r . -f json -o bandit-report.json"

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json
